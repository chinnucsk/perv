
perv watches the network for web traffic and dumps the content to your
hard drive. On a hubbed or public wifi network, this includes everyone
else's web browsing too.

perv is really just a drifnet clone
(http://www.ex-parrot.com/~chris/driftnet/) written in Erlang but differs
in that it parses the HTTP response rather than pulling media types out
of a binary stream.


HOW TO BUILD IT

1. Get the source code

git clone git://github.com/msantos/perv.git

2. Compile perv

make


HOW TO USE IT

perv:start_link() -> ok
perv:start_link(Options) -> ok

    Types   Options = list()

    See epcap documentation for options.

    Files are written to priv/files/<mime type>.

    A trace file containing the HTTP response is written to priv/tmp. The
    trace file can be unpacked by using pervon:content/3.


pervon:content(Path, Name, Response) -> ok

    Types   Path = string()
            Name = string()
            Response = binary()

    "Path" is a directory where the media in the HTTP response will
    be unpacked.

    "Name" is the suffix prepended to file names. Since the HTTP response
    can contain many files, the result of erlang:now/0 is appended to the
    name with the file type as the extension. The file type is derived
    from the "Content-Type" header.

    "Response" is the HTTP response.


peep:start() -> ok


EXAMPLES

perv includes a very basic web interface:

> peep:start().

Then open a browser: http://localhost:8889/

To unpack the HTTP response:

> {ok, Response} = file:read_file("priv/tmp/192.168.1.100:80-10.11.11.11:4343-1284292665354797.http").
> pervon:content("/tmp/content_dir", "suffix", Response).


TODO

* peep is really ugly, fix it

* handle large files, possibly by periodically writing out the buffered
  data to disk in the fsm
    * since the files are buffered, downloading very large files could
      exhaust the memory and cause the Erlang node to crash

* pervon:content/3 should return a list of tuples containing the name,
  file type and file contents, rather than writing them directly to disk


